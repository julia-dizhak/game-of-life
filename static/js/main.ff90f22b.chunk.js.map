{"version":3,"sources":["utils/make2DArray.js","utils/countTotalAmountAliveNeighbors.js","utils/defineNextGeneration.js","store/action-types.js","store/reducer.js","config.js","store/index.js","components/Square.js","components/Grid.js","Game.jsx","index.js"],"names":["make2DArray","rows","cols","fill","Math","random","arr","i","j","countTotalAmountAliveNeighbors","grid","row","col","length","reduce","amount","neighbor","x","y","defineNextGeneration","initState","nextState","JSON","parse","stringify","totalAliveNeighbors","allActionsTypes","BOOTSTRAP_APP","INIT_NEW_GENERATION","HANDLE_NEXT_GENERATION","HANDLE_RUN","HANDLE_STOP","gridState","generation","isRunning","speed","windowIfDefined","window","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","initGridState","type","prevState","nextGenerationState","Square","className","Grid","r","c","push","key","ConnectedApp","connect","hello","useSelector","shallowEqual","dispatch","useDispatch","useEffect","id","setInterval","clearInterval","onClick","renderUpperControls","disabled","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff90f22b.chunk.js","sourcesContent":["/**\n * Returns an array of arrays, each containing booleans values true or false\n * \n * @param {number} rows \n * @param {number} cols \n * @param {function} fill \n * @return {[[]]} \n */\nfunction make2DArray(rows, cols, fill = () => Math.random() < 0.3) {\n  let arr = [];\n\n  for (let i = 0; i < rows; i++) {\n    arr[i] = [];\n    for (let j = 0; j < cols; j++) {\n      arr[i][j] = fill();\n    }\n    \n  }\n\n  return arr;\n}\n\nexport {\n  make2DArray\n}","/**\n * Returns total amount of neighbors which are alive for neighbor with given \n * position (row and col) horizontally, vertically or diagonally adjacent\n * \n * @param {[[]]} grid \n * @param {number} row \n * @param {number} col \n * @return {number} \n */\nexport const countTotalAmountAliveNeighbors = (grid, row, col) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  const neighbors = [\n    [1,0], [-1,0], [0,1], [0,-1], // horizontally, vertically\n    [-1, -1], [-1, 1], [1, 1], [1, -1] // diagonally adjacent\n  ]\n  \n  return neighbors.reduce((amount, neighbor) => {\n    const x = row + neighbor[0];\n    const y = col + neighbor[1];\n\n    const isOnEdge = (x >= 0 && x < rows && y >= 0 && y < cols);\n    // No need to count more than 4 alive neighbors because it will be \n    // overpopulated cases\n    if (amount < 4 && isOnEdge && grid[x][y]) {\n      return amount + 1;\n    } else {\n      return amount;\n    }\n    \n  }, 0);\n}\n","import { countTotalAmountAliveNeighbors } from './countTotalAmountAliveNeighbors';\n\n/**\n * Returns nextState based on initState based on specific rules below\n * \n * The rules are:\n * - the cell = false becomes true (alive) when it has 3 life neighbours, otherwise \n * it stays false;\n * \n * - the cell = true dies when it has less than 2 lives (underpopulation) and \n * greater than 3 lives (overpopulation), otherwise it stays true;\n * \n * So reproduction happens with exactly 3 neighbors, death happens with < 2, \n * > 3 neighbours;\n * \n * @param {[[]]} initState \n * @return {[[]]} \n */\n\nexport const defineNextGeneration = function(initState) {\n  const nextState = JSON.parse(JSON.stringify(initState));\n  const rows = nextState.length;\n  const cols = nextState[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const totalAliveNeighbors = countTotalAmountAliveNeighbors(initState, i, j);\n      const alive = initState[i][j] ? true : false;\n\n      if (alive) {\n        if (totalAliveNeighbors < 2 || totalAliveNeighbors > 3) {\n          nextState[i][j] = false;\n        }\n      } else {\n        if (totalAliveNeighbors === 3) nextState[i][j] = true;\n      }\n    }\n  }\n\n  return nextState;\n}\n","\nconst BOOTSTRAP_APP = 'BOOTSTRAP_APP';\n\nconst INIT_NEW_GENERATION = 'INIT_NEW_GENERATION';\nconst HANDLE_NEXT_GENERATION = 'HANDLE_NEXT_GENERATION';\n\nconst HANDLE_RUN = 'HANDLE_RUN';\nconst HANDLE_STOP = 'HANDLE_STOP';\n\nconst allActionsTypes = {\n  BOOTSTRAP_APP,\n\n  INIT_NEW_GENERATION,\n  HANDLE_NEXT_GENERATION,\n\n  HANDLE_RUN,\n  HANDLE_STOP\n}\n\nexport default allActionsTypes;\n","import { make2DArray } from '../utils/make2DArray';\nimport { defineNextGeneration } from '../utils/defineNextGeneration';\nimport allActionsTypes from './action-types';\n\nimport {\n  ROWS, COLS,\n  SPEED\n} from '../config';\n\nconst initState = {\n  gridState: [],\n  rows: ROWS,\n  cols: COLS,\n  generation: 0,\n  isRunning: false,\n  speed: SPEED,\n}\n\nexport default function reducer(state = initState, action) {\n  const initGridState = make2DArray(ROWS, COLS);\n\n  switch (action.type) {\n    case allActionsTypes.BOOTSTRAP_APP:\n      return {\n        ...state,\n        gridState: initGridState\n      }\n    \n    case allActionsTypes.INIT_NEW_GENERATION:\n      return {\n        ...state, \n        generation: 0,\n        gridState: initGridState\n      }; \n      \n    case allActionsTypes.HANDLE_NEXT_GENERATION:\n      const { generation, gridState } = state;\n      const prevState = gridState;\n      const nextGenerationState = defineNextGeneration(prevState);\n\n      return {\n        ...state, \n        generation: generation + 1,\n        gridState: nextGenerationState\n      };   \n\n    case allActionsTypes.HANDLE_RUN:\n      return {\n        ...state, \n        isRunning: true\n      };  \n        \n    case allActionsTypes.HANDLE_STOP:\n      return {\n        ...state, \n        isRunning: false\n      };   \n  \n    default:\n      break;\n  }\n\n  return state;\n}\n","export const ROWS = 20;\nexport const COLS = 40;\nexport const SPEED = 100;","import { createStore, compose } from 'redux';\nimport reducer from './reducer'\n\nconst windowIfDefined = typeof window === 'undefined' ? null : window;\nconst composeEnhancers = (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers()\n);","import React from 'react';\n\nconst Square = ({className}) => {\n  return (\n    <div className={className} /> \n  )\n}\n\nexport { Square }","import React from 'react';\nimport { Square } from './Square';\n\n/* \n* Build a grid via rows and cols\n*/\nconst Grid = ({gridState}) => {\n  let rows = [];\n  const r = gridState.length;\n  const c = gridState[0].length;\n\n  for (let i = 0; i < r; i++) {\n    let cols = [];\n    for (let j = 0; j < c; j++) {\n      cols.push(\n        <Square \n          key={`${i},${j}`}\n          className={`col ${gridState[i][j] ? 'alive' : 'dead'}`}\n        />\n      )\n    }\n    rows.push(\n      <div \n        key={`${i}`}\n        className=\"row\"\n        >\n          {cols}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid\"> \n      {rows}\n    </div>\n  )\n}\n\nexport { Grid }\n","import React, { useEffect } from 'react';\nimport { connect, useSelector, useDispatch, shallowEqual } from 'react-redux';\n\nimport allActionsTypes from './store/action-types';\nimport { Grid } from './components/Grid'\nimport './game.css';\n\nfunction Game() {\n  const { gridState, generation, isRunning, speed } = useSelector(state => ({\n    gridState: state.gridState,\n    generation: state.generation,\n    isRunning: state.isRunning,\n    speed: state.speed\n  }), shallowEqual);\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({ type: allActionsTypes.BOOTSTRAP_APP })\n  }, []);\n\n  useEffect(() => {\n    let id;\n\n    if (isRunning) {\n      id = setInterval(() => {\n        dispatch({type: allActionsTypes.HANDLE_NEXT_GENERATION})\n      }, speed);\n    }\n\n    if (!isRunning) {\n      clearInterval(id);\n    }\n    return () => clearInterval(id);\n\n  }, [isRunning, speed]);\n\n  const renderUpperControls = (isRunning) => {\n    return isRunning ? \n      <button \n        type=\"button\" \n        onClick={() => dispatch({type: allActionsTypes.HANDLE_STOP})}>Stop</button> \n      :\n      <button \n        type=\"button\" \n        onClick={() => dispatch({type: allActionsTypes.HANDLE_RUN})}>Start</button>;\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Conway's Game of Life</h1>\n\n      {gridState.length > 0 ? \n        <Grid \n          gridState={gridState}\n        />:\n        null  \n      }\n\n      <div className=\"generation\">\n        <p>{`Generation: ${generation}`}</p>\n      </div>  \n\n      <div className=\"controls\">\n        <div className=\"upper-controls\">\n          {renderUpperControls(isRunning)}\n        </div>\n\n        <div className=\"bottom-controls\">\n          <button \n            type=\"button\" \n            disabled={isRunning} \n            onClick={() => dispatch({type: allActionsTypes.HANDLE_NEXT_GENERATION})}>\n              Next generation in one step\n          </button>\n          \n          <button \n            type=\"button\" \n            disabled={isRunning} \n            onClick={() => dispatch({type: allActionsTypes.INIT_NEW_GENERATION})}>\n              Init new generation\n          </button>\n        </div>  \n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    hello: state.hello,\n  };\n}\n\nconst ConnectedApp = connect(mapStateToProps)(Game);\n\nexport default ConnectedApp;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/';\n\nimport Game from './Game';\n\nrender(\n  <Provider store={store}>\n    <Game />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}