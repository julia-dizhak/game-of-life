{"version":3,"sources":["utils/make2DArray.js","utils/countTotalAmountAliveNeighbors.js","utils/defineNextGeneration.js","store/reducer.js","config.js","store/index.js","components/Square.js","components/Grid.js","Game.jsx","index.js"],"names":["make2DArray","rows","cols","fill","Math","random","arr","i","j","countTotalAmountAliveNeighbors","grid","row","col","length","reduce","amount","neighbor","x","y","defineNextGeneration","initState","nextState","slice","totalAliveNeighbors","gridState","generation","isRunning","speed","windowIfDefined","window","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","state","action","initGridState","type","prevState","nextGenerationState","Square","className","Grid","r","c","push","key","uuid1","ConnectedApp","connect","hello","props","useSelector","dispatch","useDispatch","useEffect","disabled","onClick","render","document","getElementById"],"mappings":"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","file":"static/js/main.28d9dbcf.chunk.js","sourcesContent":["/**\n * Returns an array of arrays, each containing booleans values true or false\n * \n * @param {number} rows \n * @param {number} cols \n * @param {function} fill \n * @return {[[]]} \n */\nfunction make2DArray(rows, cols, fill = () => Math.random() < 0.3) {\n  let arr = [];\n\n  for (let i = 0; i < rows; i++) {\n    arr[i] = [];\n    for (let j = 0; j < cols; j++) {\n      arr[i][j] = fill();\n    }\n    \n  }\n\n  return arr;\n}\n\nexport {\n  make2DArray\n}","/**\n * Returns total amount of neighbors which are alive for neighbor with given \n * position (row and col)\n * \n * @param {[[]]} grid \n * @param {number} row \n * @param {number} col \n * @return {number} \n */\nexport const countTotalAmountAliveNeighbors = (grid, row, col) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  const neighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n  \n  return neighbors.reduce((amount, neighbor) => {\n    const x = row + neighbor[0];\n    const y = col + neighbor[1];\n\n    const isOnEdge = (x >= 0 && x < rows && y >= 0 && y < cols);\n    if (isOnEdge && grid[x][y]) {\n      return amount + 1;\n    } else {\n      return amount;\n    }\n  }, 0);\n}","import { countTotalAmountAliveNeighbors } from './countTotalAmountAliveNeighbors';\n\n/**\n * todo\n * Returns nextState based on initState based on specific rules below\n * \n * The rules are:\n * - the cell = false becomes true (alive) when it has 3 life neighbours, otherwise \n * it stays false;\n * \n * - the cell = true dies when it has less than 2 lives (underpopulation) and \n * greater than 3 lives (overpopulation), otherwise it stays true;\n * \n * So reproduction happens with exactly 3 neighbors, death happens with < 2, \n * > 3 neighbours;\n * \n * @param {[[]]} initState \n * @return {[[]]} \n */\n\nexport const defineNextGeneration = function(initState) {\n  const nextState = initState.slice();\n\n  const rows = initState.length;\n  const cols = initState[0].length;\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const totalAliveNeighbors = countTotalAmountAliveNeighbors(initState,i,j);\n      const alive = initState[i][j] ? true : false;\n\n      if (alive) {\n        if (totalAliveNeighbors < 2 || totalAliveNeighbors > 3) {\n          nextState[i][j] = false;\n        }\n      } else {\n        if (totalAliveNeighbors == 3) nextState[i][j] = true;\n      }\n    }\n  }\n\n  return nextState;\n}","import { make2DArray } from '../utils/make2DArray';\nimport { defineNextGeneration } from '../utils/defineNextGeneration';\n\nimport {\n  ROWS, COLS,\n  SPEED\n} from '../config';\n\n// action types\nexport const BOOTSTRAP_APP = 'BOOTSTRAP_APP';\nexport const INIT_NEW_GENERATION = 'INIT_NEW_GENERATION';\nexport const HANDLE_NEXT_GENERATION = 'HANDLE_NEXT_GENERATION';\n\nconst initState = {\n  gridState: [],\n  rows: ROWS,\n  cols: COLS,\n  generation: 0,\n  isRunning: false,\n  speed: SPEED,\n}\n\nexport default function reducer(state = initState, action) {\n  const initGridState = make2DArray(ROWS, COLS);\n\n  switch (action.type) {\n    case BOOTSTRAP_APP:\n      return {\n        ...state,\n        gridState: initGridState\n      }\n    \n    case INIT_NEW_GENERATION:\n      return {\n        ...state, \n        generation: 0,\n        gridState: initGridState\n      }; \n      \n    case HANDLE_NEXT_GENERATION:\n      const { generation, gridState } = state;\n      const prevState = gridState;\n      const nextGenerationState = defineNextGeneration(prevState);\n      return {\n        ...state, \n        generation: generation + 1,\n        gridState: nextGenerationState\n      };   \n  \n    default:\n      break;\n  }\n\n\n  return state;\n}\n","export const ROWS = 20;\nexport const COLS = 20;\nexport const SPEED = 500;","import { createStore, compose } from 'redux';\nimport reducer from './reducer'\n\nconst windowIfDefined = typeof window === 'undefined' ? null : window;\nconst composeEnhancers = (windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n  reducer,\n  composeEnhancers()\n);","import React from 'react';\n\nconst Square = ({className}) => {\n  return (\n    <div className={className} /> \n  )\n}\n\nexport { Square }","import React from 'react';\nimport uuid1 from 'uuid/v1';\n\nimport { Square } from './Square';\n\n/* \n  build a grid via rows and cols\n*/\nconst Grid = ({gridState}) => {\n  let rows = [];\n  const r = gridState.length;\n  const c = gridState[0].length;\n\n  for (let i = 0; i < r; i++) {\n    let cols = [];\n    for (let j = 0; j < c; j++) {\n      cols.push(\n        <Square \n          key={uuid1() + `${r},${c}`}\n          className={`col ${gridState[i][j] ? 'alive' : 'dead'}`}\n        />\n      )\n    }\n    rows.push(\n      <div \n        key={uuid1() + `${r}`}\n        className=\"row\"\n        >\n          {cols}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"grid\"> \n      {rows}\n    </div>\n  )\n}\n\nexport { Grid }","import React, { useEffect } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\n\nimport { \n  BOOTSTRAP_APP, \n  INIT_NEW_GENERATION, HANDLE_NEXT_GENERATION } from './store/reducer';\nimport { Grid } from './components/Grid'\nimport './game.css';\n\nfunction Game(props) {\n  // todo optimize useSelector\n  const gridState = useSelector(state => state.gridState);\n  const isRunning = useSelector(state => state.isRunning);\n  const generation = useSelector(state => state.generation);\n\n  const dispatch = useDispatch();\n  useEffect(()=> {\n    dispatch({type: BOOTSTRAP_APP})\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Conway's Game of Life</h1>\n\n      {gridState.length > 0 ? \n        <Grid \n          gridState={gridState}\n        />:\n        null  \n      }\n\n      <div className=\"controls\">\n        <p>{`Generation: ${generation}`}</p>\n        <button type=\"button\">stop</button>\n        <button type=\"button\">start</button>\n\n        <button \n          type=\"button\" \n          disabled={isRunning} \n          onClick={() => dispatch({type: HANDLE_NEXT_GENERATION})}>\n            Next generation in one step\n        </button>\n        \n        <button \n          type=\"button\" \n          disabled={isRunning} \n          onClick={() => dispatch({type: INIT_NEW_GENERATION})}>\n            Init new generation\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    hello: state.hello,\n  };\n}\n\nconst ConnectedApp = connect(mapStateToProps)(Game);\n\nexport default ConnectedApp;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store/';\n\nimport Game from './Game';\n\nrender(\n  <Provider store={store}>\n    <Game />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}